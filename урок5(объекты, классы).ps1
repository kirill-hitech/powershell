# Урок 5
# Объекты и классы

# Класс - пользовательский ссылочный тип данных; нужны чтобы объединить данные и методы работы с ними

# порядок работы с классами:
# 1. объявление класса.
# 2. создание объекта класса
# 3. используем объект класса: прочитать свойство, записать свойство, вызов метода (нестатического)

# пример объявления класса: ключевое слово class, затем в теле идет объявление полей класса и методов
class connector{
[System.String]$name # свойство (имеет тип и имя), является членом класса
}

# пример вызова неявного конструктора (выше он не описан в объявлении):
[connector]$test = New-Object -TypeName connector # вызов конструктора через коммандлет new-object 
[connector]$test = [connector]::new()             # вызов конструктора через операцию доступа к статическим членам класса

# задаем значение свойству Name объекту с именем test класса connector:
$test.Name = "my first connector"
# выводим на экран значение поля 
write-host $test 
write-host $test.name

################
# понятие ассоциативности операторов:
$test2 = "hello world!".Split(" ") # оператор присвоения правоассоциативный - то, что справа от него будет выполнено первым
$test2 | Write-Host # оператор пайплайна (конвеера) левоассоциативный - то что слева, выполнится сначала и будет передано в правую часть как аргумент

$a = 1
$b = 2
$c = 3

$d = $c = $b = $a # какой оператор присвоения будет выполнен первым? :)
# тк оператор присвоения правоассоциативный, операции будут выполнены справа налево

#################
# КОНСТРУКТОРЫ КЛАССОВ
# каждый класс имеет конструктор - явный или не явный.
# конструктор - это такая функция, которая вызывается каждый раз при создании объекта этого класса

# конструктор объявляется через метод класса, одноименный с именем класса.
# пример объявления класса который содержит объявление явного конструктора 
class connector2{
[System.String]$name # свойство (имеет тип и имя), является членом класса
connector2()
    { # это объявление явного конструктора
        $this.name = "set by constructor" # обращение к полю name, через ссылку на собственный объект (через ссылку на самого себя)
    } 
}

[connector2]$test2 = [connector2]::new() # здесь происходит вызов конструктора, который возвращает ссылку на новый созданный объект нашего класса, затем выполняется оператор присвоения, который записывает ссылку на наш объект в переменную
Write-Host $test2.name
 

#################
# конструкторы как и методы класса могут быть перегружены: в зависимости от кол-ва аргументов или типа аргументов:

class connector4{

[System.String]$name # свойство (имеет тип и имя), является членом класса



connector4() # конструктор по умолчанию. он существует всегда 
    { # это объявление явного конструктора
        $this.name = "set by constructor1" # обращение к полю name, через ссылку на собственный объект (через ссылку на самого себя)
    } 

# пример перегрузки конструктора по кол-ву аргументов:
connector4($arg1) {} # это перегрузка конструктора по умолчанию (с одним аргументов)
connector4($arg1,$arg2) {} # это перегрузка конструктора по умолчанию (с двумя аргументами)


# пример перегрузки конструктора по типу входящих аргументов:
connector4([System.String]$varName) # это перегрузка конструктора - если мы при вызове конструктора дадим аргумент на вход - будет вызван он, а не первый конструктор
    { # это объявление явного конструктора
        $this.name = "set by constructor with argument(string)" # обращение к полю name, через ссылку на собственный объект (через ссылку на самого себя)
    } 
connector4([System.Int32]$varName) # это перегрузка конструктора - если мы при вызове конструктора дадим аргумент на вход - будет вызван он, а не первый конструктор
    { # это объявление явного конструктора
        $this.name = "set by constructor with argument(int32)" # обращение к полю name, через ссылку на собственный объект (через ссылку на самого себя)
    } 
}

# создаем объект 1 и конструктор вызываем по умолчанию
$var1 = [connector4]::new()

# создаем объект 2 и передаем аргумент конструктору - cтроку
$var2 = New-object -TypeName connector4 -ArgumentList "32" # здесь передаем строку в конструктор (String)

# создаем объект 3 и передаем аргумен конструктору - число
$var3 = New-object -TypeName connector4 -ArgumentList 32   # здесь передаем число в конструкторв (int32)

Write-Host $var1.name
Write-Host $var2.name
Write-Host $var3.name

#################
# Метод класса - это член класса, похожий на функцию. он может принимать значения (в виде аргументов) и возвращать значения

class connector5{
[System.String]$name # свойство (имеет тип и имя), является членом класса

connector5($arg1){$this.name = $arg1}

# Пример метода:
    ShowName(){
        Write-Host $this.name
    }
}

$var1 = New-Object -TypeName connector5 -ArgumentList "variable 1"
$var2 = New-Object -TypeName connector5 -ArgumentList "variable 2"

# методы применяются к самим объектам, а не сами по себе (в отличии от функций, которые используются сами по себе)
$var1.ShowName()
$var2.ShowName()


######################
# статические члены класса (свойства и методы)
# статические члены класса могут вызываться без создания самого объекта класса через операцию доступа к статическим объектам класса ::

# если нужно создать статический член класса, перед его именем нужно указать ключевое слово static

class connector6{
[System.String]$name # свойство (имеет тип и имя), является членом класса (не статический)


static [System.String]$СlassName = "connector6"  # статическое свойство и его значение

connector6($arg1){$this.name = $arg1}

# Пример метода:
    ShowName(){
        Write-Host $this.name
    }
}

# статические члены класса не требуют создания объекта:
[connector6]::СlassName

################mail.ru

# члены класса могут быть открытые или скрытые.
# это позволяет программисту скрывать или открывать доступ к свойствам или методам извне.

# по умолчанию все члены класса открытые(свойство и метод в данном примере):
class connector7{
    [System.String]$name # свойство (имеет тип и имя), является членом класса (не статический)
    connector7($arg1){$this.name = $arg1}
    ShowName(){Write-Host $this.name} # метод
}

# тк по умолчанию члены открытые, мы можем их вызывать через операцию точки. а для свойств устанавливать значения (за счет аксессоров гет/сет)
$var1 = New-Object -TypeName connector7 -ArgumentList "hello world!"
$var1.name                # доступно
$var1.name = "some value" # доступно
$var1.ShowName()          # доступно

# скрытые члены класса отмечаются ключевым словом hidden
# пример скрытых членов класса:
class connector8{
    hidden [System.String]$name # свойство (имеет тип и имя), является членом класса (не статический)
    connector8($arg1){$this.name = $arg1}
    hidden ShowName(){Write-Host $this.name} # метод
}

$var2 = New-Object -TypeName connector8 -ArgumentList "hello world!"
$var2.name                # доступно, но не отображается
$var2.name = "some value" # доступно, но не отображается
$var2.ShowName()          # доступно, но не отображается



####################
# есть спец коммандлеты встроенные, которые позволяют вывести на экран все свойства и/или методы любого класса

get-member -InputObject $var1 # показать динамические члены класса данного объекта
get-member -InputObject $var1 -Static # показать статические члены класса данного объекта


#################
## бонус
# оператор вызова & позволяет выполнять команды, которые хранятся в переменных и представляются строками

$string1 = "get-service"
&$string1