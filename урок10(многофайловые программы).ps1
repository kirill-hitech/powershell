## урок 10 - многофайловые программы
# многофайловость нужна для повторного использования одного и того же кода множество раз.
# программы павершелл состоят не только из одного файла.
# даже открытая ISE подгружает готовые модули и использует их, поэтому однофайловой не является.

# среди автоматических переменных в ISE есть строковая переменная
$env:PSModulePath

$env:PSModulePath -split ';'

# эта автомат переменная отвечает за папки, вкторых должны находиться подгружаемые модули
# в формате psd1 или psm1 или в виде бинарных библиотек dll


###################
# модули бывают двух типов:

# пример модуля в формате библитеки
# C:\Windows\system32\WindowsPowerShell\v1.0\Modules\DnsClient


# пример модуля в формате открытого кода
# C:\Windows\system32\WindowsPowerShell\v1.0\Modules\WindowsUpdate


########################

# посмотреть подгруженные модули можно коммандлетом 
Get-Module

# при этом выгружаются для пользователя не все функции модуля,
# а лишь те, что отмечены внутри модуля Export-ModuleMember
Import-Module windowsupdate


##### модули лежащие в папках $env:PSModulePath автоматически подгружаются при старте ISE

# пользователь может самостоятельно создавать модули их хранить в них данные:типы данных, переменные, функции
# сам файл с расширением ps1 по сути представляет из себя функцию - он может принимать аргументы и возвращать значения
# так можно посмотреть справку об аргументах в файле:
Get-Help "C:\Users\admin\Desktop\Powershell\examples\do-test.ps1" -Full

# точно также, устроены все приложения - они получают аргументы, обрабатывают их и возвращают в вызвашую их среду значения

## иногда бывает важно, получить вывод какого-то то приложения в переменную. 
# чтобы сделать это можно исопльзовать следующий синтаксис в павершелл:
$cmdOutput = C:\Windows\System32\PING.EXE 2>&1 # redirect error stream (2) to success stream (1)